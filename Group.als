module Group

open util/ordering[Time]

--------------------------------------------------------------------------------------------------------------------
-- シグネチャ
--------------------------------------------------------------------------------------------------------------------

sig Time{}
sig 受注{
	内容: set 大項目
}
sig 大項目{
	GRP: グループ one -> Time
}{
	-- 受注をまたがない
	one this.~内容
}

sig グループ{
}{
	-- 受注をまたがない
	one this.~(GRP.Time).~内容
}
sig 業務終了報告書{
	内容: 作業実績 set -> Time
}
sig 作業実績{
	対応: 大項目 lone -> Time
}{
	-- 高々一度だけ業務終了報告される
	lone this.~(内容.Time)
	-- 高々一度だけ請求される
	lone this.~(対象.Time)
	-- 業務終了のときには大項目に結びつくし逆も真
	all t: Time | no this.@対応.t <=> no this.~(内容.t)
}

sig 請求書{
	対象: 作業実績 set -> Time
}

--------------------------------------------------------------------------------------------------------------------
-- ユーティリティ
--------------------------------------------------------------------------------------------------------------------
fun 提出済み業務終了報告書(t: Time) : set 業務終了報告書{
	(業務終了報告書 <: 内容).t.作業実績
}
fun 未使用業務終了報告書(t: Time) : set 業務終了報告書{
	業務終了報告書 - 提出済み業務終了報告書[t]
}
fun この時点で発行された業務終了報告書(t, t': Time) : set 業務終了報告書{
	未使用業務終了報告書[t] & 提出済み業務終了報告書[t']
}
fun 有効グループ(t: Time, ws: 作業実績) : set グループ{
	{g: 大項目.GRP.t | #g.~(GRP.t) <= #ws}
}
fun 使用済み作業実績(t: Time) : set 作業実績{
	(作業実績 <: 対応).t.大項目
}
fun 未使用作業実績(t: Time) : set 作業実績{
	作業実績 - 使用済み作業実績[t]
}
fun 請求済み請求書(t: Time) : set 請求書{
	(請求書 <: 対象).t.作業実績
}
fun 未使用請求書(t: Time) : set 請求書{
	請求書 - 請求済み請求書[t]
}
fun 業務終了報告書と大項目の関係(t: Time) : 業務終了報告書 -> 大項目{
	(業務終了報告書 <: 内容).t.(作業実績 <: 対応).t
}
fun 請求済み作業実績(t: Time) : set 作業実績{
	請求書.対象.t
}
fun 請求可能作業実績(t: Time) : set 作業実績{
	使用済み作業実績[t] - 請求済み作業実績[t]
}
fun 複数グループを保持する受注のグループ群 : set グループ{
	{g: 受注.内容.(GRP.Time) | #受注.内容.(GRP.Time)>1}
}
fun この時点で発行された請求書(t, t': Time) : set 請求書{
	未使用請求書[t] & 請求済み請求書[t']
}

--------------------------------------------------------------------------------------------------------------------
-- ファクト
--------------------------------------------------------------------------------------------------------------------

fact 業務終了報告書は同じ大項目に複数の作業実績を含まない{
	all t: Time | no z: 大項目 | some x: 業務終了報告書 | some disj y, y': 作業実績 |
		z in y.(対応.t) and z in y'.(対応.t) and y in x.(内容.t) and y' in x.(内容.t) 
}
fact 業務終了報告書の作業実績に対応する大項目はすべて同じグループかつそのグループの大項目を全て含む{
	all t: Time - last | let t' = t.next |
		all x: この時点で発行された業務終了報告書[t, t'] | let 大 = x.(内容.t').(対応.t'), グ = 大.(GRP.t') |
			one グ and 大 = グ.~(GRP.t')
}

fact 請求書の作業実績に対応する大項目はすべて同じグループかつそのグループの未請求の作業実績を全て含む{
	all t: Time - last | let t' = t.next |
		all x: この時点で発行された請求書[t, t'] |
			let グ = x.(対象.t').(対応.t').(GRP.t'), 作 = グ.~(GRP.t).~(対応.t) |
				one グ and x.対象.t' = 作 & 請求可能作業実績[t]
}
fact 請求書の作業実績は業務終了報告されてから{
	all t: Time, c: 請求書 | let t' = t.next | some c.対象.t' => all w: c.対象.t' | some w.~(内容.t)
}

--------------------------------------------------------------------------------------------------------------------
-- アサーション
--------------------------------------------------------------------------------------------------------------------

-- このアサーションは途中で大項目のグループを変えることもあるので反例が出る可能性がある
assert 業務終了報告書の作業実績は同一請求書にて請求されるか{
	all x: 業務終了報告書 | lone x.(内容.Time).~(対象.Time)
}
check 業務終了報告書の作業実績は同一請求書にて請求されるか for 5

-- このアサーションは途中で大項目のグループを変えることもあるので反例が出る可能性がある
assert 業務終了報告書の作業実績は常に同一グループ{
	all t: Time, x: 業務終了報告書 | lone x.(内容.t).(対応.t).(GRP.t)
}
check 業務終了報告書の作業実績は常に同一グループ for 5

-- このアサーションは途中で大項目のグループを変えることもあるので反例が出る可能性がある
assert 請求書の作業実績は常に同一グループ{
	all t: Time, x: 請求書 | lone x.(対象.t).(対応.t).(GRP.t)
}
check 請求書の作業実績は常に同一グループ for 5

-- 請求漏れはありえないか(請求書はその時点で大項目から参照されているグループに対して行うので以下のアサーションとなる)
-- 【重要】 この知見から大項目は作業実績が一度でも作られたら削除不可
--          そして大項目はグループが必須項目で変更しても良いがどのグループにも属さない瞬間は作ったらダメ
--              => (これはシグネチャの多重度で指定しているがデグレ対応を見据えてアサーションにしておく)
assert 任意の時点において請求可能な作業実績は大項目で使われているグループからたどれる{
	all t: Time | 請求可能作業実績[t] in 大項目.GRP.t.~(GRP.t).~(対応.t)
}
check 任意の時点において請求可能な作業実績は大項目で使われているグループからたどれる for 5 but 10 Time

-- 上記の「任意の時点において請求可能な作業実績は大項目で使われているグループからたどれる」を保証するための前提
assert 業務終了報告書の作業実績に対応する大項目がなくなることはない{
	all t: Time, x: 業務終了報告書, w: x.(内容.t) | some w.(対応.t)
}
check 業務終了報告書の作業実績に対応する大項目がなくなることはない for 5 but 10 Time

-- 上記の「任意の時点において請求可能な作業実績は大項目で使われているグループからたどれる」を保証するための前提
-- これはシグネチャのフィールドの多重度で保証しているがデグレ対応を見据えてアサーションにしておく
assert 大項目のグループがなくなる瞬間はない{
	all t: Time, x: 大項目 | some x.(GRP.t)
}
check 大項目のグループがなくなる瞬間はない for 5 but 10 Time

--------------------------------------------------------------------------------------------------------------------
-- トレース
--------------------------------------------------------------------------------------------------------------------

pred 業務終了報告書を発行する(t: Time, g: グループ, ws: 作業実績, r: 業務終了報告書){
	-- 中身ないけど他の制約からできてるみたいだ
	-- 出せる余地を作ることと出せる条件が決まっていることからかもしれない
}
pred 請求書を発行する(t: Time, ws: 作業実績, c: 請求書){
	-- 中身ないけど他の制約からできているみたいだ
	-- 出せる余地を作ることと出せる条件が決まっていることからかもしれない
}
pred 大項目のグループを変更する(t: Time, w: 大項目, g: グループ){
	w.GRP.t = g
}

pred init(t: Time){
	no (業務終了報告書 <: 内容).t
	no (請求書 <: 対象).t
	no (作業実績 <: 対応).t
}
fact Traces{
	first.init
	all t: Time - last | let t' = t.next {
		-- 使用済み作業実績はそのまま
		all wdone: 使用済み作業実績[t] | wdone.対応.t' = wdone.対応.t
		-- 業務終了報告書は一度出したらおしまい
		all rdone: 提出済み業務終了報告書[t] | rdone.内容.t' = rdone.内容.t
		-- 請求書は一度出したらおしまい
		all cdone: 請求済み請求書[t] | cdone.対象.t' = cdone.対象.t
		-- 出せる業務終了報告書があったら出す
		all rvirgin: 未使用業務終了報告書[t] |
			let ws = 未使用作業実績[t] | some g: 有効グループ[t', ws] |
			業務終了報告書を発行する[t', g, ws, rvirgin] or rvirgin.内容.t' = rvirgin.内容.t
		all cvirgin: 未使用請求書[t] | let ws = 請求可能作業実績[t] |
			請求書を発行する[t', ws, cvirgin] or cvirgin.対象.t' = cvirgin.対象.t
		-- 大項目のグループを変更
		all g: 複数グループを保持する受注のグループ群 | some w: g.~(GRP.t) | some g': 複数グループを保持する受注のグループ群 - g |
			大項目のグループを変更する[t', w, g'] or w.GRP.t' = w.GRP.t
		}
}

--------------------------------------------------------------------------------------------------------------------
-- 探索効率を上げるための述語
--------------------------------------------------------------------------------------------------------------------

pred 内容のない受注は無視{
	all x: 受注 | some x.内容
}
pred 作業実績のない業務終了報告書は無視{
	all x: 業務終了報告書 | some x.内容.Time
}
pred ひとつは業務終了報告書が出ている(t: Time){
	let t' = t.next |
		some (業務終了報告書 <: 内容).t'.作業実績 - (業務終了報告書 <: 内容).t.作業実績
}
pred もう出せる報告書はない(t: Time){
	no 業務終了報告書 - (業務終了報告書 <: 内容).t.作業実績
}
pred 可能な限り業務終了報告書を出す{
	all t: Time | ひとつは業務終了報告書が出ている[t] or もう出せる報告書はない[t]
}
-- Timeを月と見做している(もし効率のために複数月の処理を1Timeで進める場合にはこれは除去する)
pred 同時に業務終了報告される大項目はない{
	all x: 大項目, t: Time - last | let t' = t.next |
		lone (業務終了報告書と大項目の関係[t'] - 業務終了報告書と大項目の関係[t]).x
}
pred 請求がある{
	some c: 請求書 | some c.対象.last
}
pred グループの変更があった{
	some t: Time - last | let t' = t.next |
		some x: 大項目 | x.GRP.t' != x.GRP.t
}

--------------------------------------------------------------------------------------------------------------------
-- メイン
--------------------------------------------------------------------------------------------------------------------
pred show{
	内容のない受注は無視[]
	作業実績のない業務終了報告書は無視[]
	some 業務終了報告書
	可能な限り業務終了報告書を出す[]
	同時に業務終了報告される大項目はない[]
	請求がある[]
	グループの変更があった[]
}
run show for 5 but 2 受注, 3 大項目, 4 業務終了報告書, 10 作業実績, 10 Time
